#include "WinCodeTranslate.hpp"

//Translates the win message int to their named version as string.
//How this function is generated see below:

std::string translate(int code, int type)
{
    switch(type)
    {
        case T_CALLBACK:
        case T_MESSAGE:
            return messageToString(code);
        case T_KEYCODE:
            return vkCodeToString(code);
        default:
            return std::string("Unknown type.");
    }
}

std::string vkCodeToString(int key)
{
    switch(key)
    {
        case 1: return std::string("VK_LBUTTON");
        case 2: return std::string("VK_RBUTTON");
        case 3: return std::string("VK_CANCEL");
        case 4: return std::string("VK_MBUTTON");
        case 5: return std::string("VK_XBUTTON1");
        case 6: return std::string("VK_XBUTTON2");
        case 8: return std::string("VK_BACK");
        case 9: return std::string("VK_TAB");
        case 12: return std::string("VK_CLEAR");
        case 13: return std::string("VK_RETURN");
        case 16: return std::string("VK_SHIFT");
        case 17: return std::string("VK_CONTROL");
        case 18: return std::string("VK_MENU");
        case 19: return std::string("VK_PAUSE");
        case 20: return std::string("VK_CAPITAL");
        case 21: return std::string("VK_KANA/VK_HANGEUL/VK_HANGUL");
        case 23: return std::string("VK_JUNJA");
        case 24: return std::string("VK_FINAL");
        case 25: return std::string("VK_HANJA/VK_KANJI");
        case 27: return std::string("VK_ESCAPE");
        case 28: return std::string("VK_CONVERT");
        case 29: return std::string("VK_NONCONVERT");
        case 30: return std::string("VK_ACCEPT");
        case 31: return std::string("VK_MODECHANGE");
        case 32: return std::string("VK_SPACE");
        case 33: return std::string("VK_PRIOR");
        case 34: return std::string("VK_NEXT");
        case 35: return std::string("VK_END");
        case 36: return std::string("VK_HOME");
        case 37: return std::string("VK_LEFT");
        case 38: return std::string("VK_UP");
        case 39: return std::string("VK_RIGHT");
        case 40: return std::string("VK_DOWN");
        case 41: return std::string("VK_SELECT");
        case 42: return std::string("VK_PRINT");
        case 43: return std::string("VK_EXECUTE");
        case 44: return std::string("VK_SNAPSHOT");
        case 45: return std::string("VK_INSERT");
        case 46: return std::string("VK_DELETE");
        case 47: return std::string("VK_HELP");
        case 48: return std::string("VK_0");
        case 49: return std::string("VK_1");
        case 50: return std::string("VK_2");
        case 51: return std::string("VK_3");
        case 52: return std::string("VK_4");
        case 53: return std::string("VK_5");
        case 54: return std::string("VK_6");
        case 55: return std::string("VK_7");
        case 56: return std::string("VK_8");
        case 57: return std::string("VK_9");
        case 65: return std::string("VK_A");
        case 66: return std::string("VK_B");
        case 67: return std::string("VK_C");
        case 68: return std::string("VK_D");
        case 69: return std::string("VK_E");
        case 70: return std::string("VK_F");
        case 71: return std::string("VK_G");
        case 72: return std::string("VK_H");
        case 73: return std::string("VK_I");
        case 74: return std::string("VK_J");
        case 75: return std::string("VK_K");
        case 76: return std::string("VK_L");
        case 77: return std::string("VK_M");
        case 78: return std::string("VK_N");
        case 79: return std::string("VK_O");
        case 80: return std::string("VK_P");
        case 81: return std::string("VK_Q");
        case 82: return std::string("VK_R");
        case 83: return std::string("VK_S");
        case 84: return std::string("VK_T");
        case 85: return std::string("VK_U");
        case 86: return std::string("VK_V");
        case 87: return std::string("VK_W");
        case 88: return std::string("VK_X");
        case 89: return std::string("VK_Y");
        case 90: return std::string("VK_Z");
        case 91: return std::string("VK_LWIN");
        case 92: return std::string("VK_RWIN");
        case 93: return std::string("VK_APPS");
        case 95: return std::string("VK_SLEEP");
        case 96: return std::string("VK_NUMPAD0");
        case 97: return std::string("VK_NUMPAD1");
        case 98: return std::string("VK_NUMPAD2");
        case 99: return std::string("VK_NUMPAD3");
        case 100: return std::string("VK_NUMPAD4");
        case 101: return std::string("VK_NUMPAD5");
        case 102: return std::string("VK_NUMPAD6");
        case 103: return std::string("VK_NUMPAD7");
        case 104: return std::string("VK_NUMPAD8");
        case 105: return std::string("VK_NUMPAD9");
        case 106: return std::string("VK_MULTIPLY");
        case 107: return std::string("VK_ADD");
        case 108: return std::string("VK_SEPARATOR");
        case 109: return std::string("VK_SUBTRACT");
        case 110: return std::string("VK_DECIMAL");
        case 111: return std::string("VK_DIVIDE");
        case 112: return std::string("VK_F1");
        case 113: return std::string("VK_F2");
        case 114: return std::string("VK_F3");
        case 115: return std::string("VK_F4");
        case 116: return std::string("VK_F5");
        case 117: return std::string("VK_F6");
        case 118: return std::string("VK_F7");
        case 119: return std::string("VK_F8");
        case 120: return std::string("VK_F9");
        case 121: return std::string("VK_F10");
        case 122: return std::string("VK_F11");
        case 123: return std::string("VK_F12");
        case 124: return std::string("VK_F13");
        case 125: return std::string("VK_F14");
        case 126: return std::string("VK_F15");
        case 127: return std::string("VK_F16");
        case 128: return std::string("VK_F17");
        case 129: return std::string("VK_F18");
        case 130: return std::string("VK_F19");
        case 131: return std::string("VK_F20");
        case 132: return std::string("VK_F21");
        case 133: return std::string("VK_F22");
        case 134: return std::string("VK_F23");
        case 135: return std::string("VK_F24");
        case 144: return std::string("VK_NUMLOCK");
        case 145: return std::string("VK_SCROLL");
        case 160: return std::string("VK_LSHIFT");
        case 161: return std::string("VK_RSHIFT");
        case 162: return std::string("VK_LCONTROL");
        case 163: return std::string("VK_RCONTROL");
        case 164: return std::string("VK_LMENU");
        case 165: return std::string("VK_RMENU");
        case 166: return std::string("VK_BROWSER_BACK");
        case 167: return std::string("VK_BROWSER_FORWARD");
        case 168: return std::string("VK_BROWSER_REFRESH");
        case 169: return std::string("VK_BROWSER_STOP");
        case 170: return std::string("VK_BROWSER_SEARCH");
        case 171: return std::string("VK_BROWSER_FAVORITES");
        case 172: return std::string("VK_BROWSER_HOME");
        case 173: return std::string("VK_VOLUME_MUTE");
        case 174: return std::string("VK_VOLUME_DOWN");
        case 175: return std::string("VK_VOLUME_UP");
        case 176: return std::string("VK_MEDIA_NEXT_TRACK");
        case 177: return std::string("VK_MEDIA_PREV_TRACK");
        case 178: return std::string("VK_MEDIA_STOP");
        case 179: return std::string("VK_MEDIA_PLAY_PAUSE");
        case 180: return std::string("VK_LAUNCH_MAIL");
        case 181: return std::string("VK_LAUNCH_MEDIA_SELECT");
        case 182: return std::string("VK_LAUNCH_APP1");
        case 183: return std::string("VK_LAUNCH_APP2");
        case 186: return std::string("VK_OEM_1");
        case 187: return std::string("VK_OEM_PLUS");
        case 188: return std::string("VK_OEM_COMMA");
        case 189: return std::string("VK_OEM_MINUS");
        case 190: return std::string("VK_OEM_PERIOD");
        case 191: return std::string("VK_OEM_2");
        case 192: return std::string("VK_OEM_3");
        case 219: return std::string("VK_OEM_4");
        case 220: return std::string("VK_OEM_5");
        case 221: return std::string("VK_OEM_6");
        case 222: return std::string("VK_OEM_7");
        case 223: return std::string("VK_OEM_8");
        case 226: return std::string("VK_OEM_102");
        case 229: return std::string("VK_PROCESSKEY");
        case 231: return std::string("VK_PACKET");
        case 246: return std::string("VK_ATTN");
        case 247: return std::string("VK_CRSEL");
        case 248: return std::string("VK_EXSEL");
        case 249: return std::string("VK_EREOF");
        case 250: return std::string("VK_PLAY");
        case 251: return std::string("VK_ZOOM");
        case 252: return std::string("VK_NONAME");
        case 253: return std::string("VK_PA1");
        case 254: return std::string("VK_OEM_CLEAR");
        default: return std::string("Unknown Keycode: " + std::to_string(key));
    }
}

std::string messageToString(size_t msg)
{
    switch(LOWORD(msg))
    {
        case 0: return std::string("WM_NULL");
        case 1: return std::string("WM_CREATE");
        case 2: return std::string("WM_DESTROY");
        case 3: return std::string("WM_MOVE");
        case 5: return std::string("WM_SIZE");
        case 6: return std::string("WM_ACTIVATE");
        case 7: return std::string("WM_SETFOCUS");
        case 8: return std::string("WM_KILLFOCUS");
        case 10: return std::string("WM_ENABLE");
        case 11: return std::string("WM_SETREDRAW");
        case 12: return std::string("WM_SETTEXT");
        case 13: return std::string("WM_GETTEXT");
        case 14: return std::string("WM_GETTEXTLENGTH");
        case 15: return std::string("WM_PAINT");
        case 16: return std::string("WM_CLOSE");
        case 17: return std::string("WM_QUERYENDSESSION");
        case 18: return std::string("WM_QUIT");
        case 19: return std::string("WM_QUERYOPEN");
        case 20: return std::string("WM_ERASEBKGND");
        case 21: return std::string("WM_SYSCOLORCHANGE");
        case 22: return std::string("WM_ENDSESSION");
        case 24: return std::string("WM_SHOWWINDOW");
        case 25: return std::string("WM_CTLCOLOR");
        case 26: return std::string("WM_WININICHANGE");
        case 27: return std::string("WM_DEVMODECHANGE");
        case 28: return std::string("WM_ACTIVATEAPP");
        case 29: return std::string("WM_FONTCHANGE");
        case 30: return std::string("WM_TIMECHANGE");
        case 31: return std::string("WM_CANCELMODE");
        case 32: return std::string("WM_SETCURSOR");
        case 33: return std::string("WM_MOUSEACTIVATE");
        case 34: return std::string("WM_CHILDACTIVATE");
        case 35: return std::string("WM_QUEUESYNC");
        case 36: return std::string("WM_GETMINMAXINFO");
        case 38: return std::string("WM_PAINTICON");
        case 39: return std::string("WM_ICONERASEBKGND");
        case 40: return std::string("WM_NEXTDLGCTL");
        case 42: return std::string("WM_SPOOLERSTATUS");
        case 43: return std::string("WM_DRAWITEM");
        case 44: return std::string("WM_MEASUREITEM");
        case 45: return std::string("WM_DELETEITEM");
        case 46: return std::string("WM_VKEYTOITEM");
        case 47: return std::string("WM_CHARTOITEM");
        case 48: return std::string("WM_SETFONT");
        case 49: return std::string("WM_GETFONT");
        case 50: return std::string("WM_SETHOTKEY");
        case 51: return std::string("WM_GETHOTKEY");
        case 55: return std::string("WM_QUERYDRAGICON");
        case 57: return std::string("WM_COMPAREITEM");
        case 61: return std::string("WM_GETOBJECT");
        case 65: return std::string("WM_COMPACTING");
        case 68: return std::string("WM_COMMNOTIFY");
        case 70: return std::string("WM_WINDOWPOSCHANGING");
        case 71: return std::string("WM_WINDOWPOSCHANGED");
        case 72: return std::string("WM_POWER");
        case 73: return std::string("WM_COPYGLOBALDATA");
        case 74: return std::string("WM_COPYDATA");
        case 75: return std::string("WM_CANCELJOURNAL");
        case 78: return std::string("WM_NOTIFY");
        case 80: return std::string("WM_INPUTLANGCHANGEREQUEST");
        case 81: return std::string("WM_INPUTLANGCHANGE");
        case 82: return std::string("WM_TCARD");
        case 83: return std::string("WM_HELP");
        case 84: return std::string("WM_USERCHANGED");
        case 85: return std::string("WM_NOTIFYFORMAT");
        case 123: return std::string("WM_CONTEXTMENU");
        case 124: return std::string("WM_STYLECHANGING");
        case 125: return std::string("WM_STYLECHANGED");
        case 126: return std::string("WM_DISPLAYCHANGE");
        case 127: return std::string("WM_GETICON");
        case 128: return std::string("WM_SETICON");
        case 129: return std::string("WM_NCCREATE");
        case 130: return std::string("WM_NCDESTROY");
        case 131: return std::string("WM_NCCALCSIZE");
        case 132: return std::string("WM_NCHITTEST");
        case 133: return std::string("WM_NCPAINT");
        case 134: return std::string("WM_NCACTIVATE");
        case 135: return std::string("WM_GETDLGCODE");
        case 136: return std::string("WM_SYNCPAINT");
        case 160: return std::string("WM_NCMOUSEMOVE");
        case 161: return std::string("WM_NCLBUTTONDOWN");
        case 162: return std::string("WM_NCLBUTTONUP");
        case 163: return std::string("WM_NCLBUTTONDBLCLK");
        case 164: return std::string("WM_NCRBUTTONDOWN");
        case 165: return std::string("WM_NCRBUTTONUP");
        case 166: return std::string("WM_NCRBUTTONDBLCLK");
        case 167: return std::string("WM_NCMBUTTONDOWN");
        case 168: return std::string("WM_NCMBUTTONUP");
        case 169: return std::string("WM_NCMBUTTONDBLCLK");
        case 171: return std::string("WM_NCXBUTTONDOWN");
        case 172: return std::string("WM_NCXBUTTONUP");
        case 173: return std::string("WM_NCXBUTTONDBLCLK");
        case 176: return std::string("EM_GETSEL");
        case 177: return std::string("EM_SETSEL");
        case 178: return std::string("EM_GETRECT");
        case 179: return std::string("EM_SETRECT");
        case 180: return std::string("EM_SETRECTNP");
        case 181: return std::string("EM_SCROLL");
        case 182: return std::string("EM_LINESCROLL");
        case 183: return std::string("EM_SCROLLCARET");
        case 185: return std::string("EM_GETMODIFY");
        case 187: return std::string("EM_SETMODIFY");
        case 188: return std::string("EM_GETLINECOUNT");
        case 189: return std::string("EM_LINEINDEX");
        case 190: return std::string("EM_SETHANDLE");
        case 191: return std::string("EM_GETHANDLE");
        case 192: return std::string("EM_GETTHUMB");
        case 193: return std::string("EM_LINELENGTH");
        case 194: return std::string("EM_REPLACESEL");
        case 195: return std::string("EM_SETFONT");
        case 196: return std::string("EM_GETLINE");
        case 197: return std::string("EM_LIMITTEXT/EM_SETLIMITTEXT");
        case 198: return std::string("EM_CANUNDO");
        case 199: return std::string("EM_UNDO");
        case 200: return std::string("EM_FMTLINES");
        case 201: return std::string("EM_LINEFROMCHAR");
        case 202: return std::string("EM_SETWORDBREAK");
        case 203: return std::string("EM_SETTABSTOPS");
        case 204: return std::string("EM_SETPASSWORDCHAR");
        case 205: return std::string("EM_EMPTYUNDOBUFFER");
        case 206: return std::string("EM_GETFIRSTVISIBLELINE");
        case 207: return std::string("EM_SETREADONLY");
        case 209: return std::string("EM_SETWORDBREAKPROC/EM_GETWORDBREAKPROC");
        case 210: return std::string("EM_GETPASSWORDCHAR");
        case 211: return std::string("EM_SETMARGINS");
        case 212: return std::string("EM_GETMARGINS");
        case 213: return std::string("EM_GETLIMITTEXT");
        case 214: return std::string("EM_POSFROMCHAR");
        case 215: return std::string("EM_CHARFROMPOS");
        case 216: return std::string("EM_SETIMESTATUS");
        case 217: return std::string("EM_GETIMESTATUS");
        case 224: return std::string("SBM_SETPOS");
        case 225: return std::string("SBM_GETPOS");
        case 226: return std::string("SBM_SETRANGE");
        case 227: return std::string("SBM_GETRANGE");
        case 228: return std::string("SBM_ENABLE_ARROWS");
        case 230: return std::string("SBM_SETRANGEREDRAW");
        case 233: return std::string("SBM_SETSCROLLINFO");
        case 234: return std::string("SBM_GETSCROLLINFO");
        case 235: return std::string("SBM_GETSCROLLBARINFO");
        case 240: return std::string("BM_GETCHECK");
        case 241: return std::string("BM_SETCHECK");
        case 242: return std::string("BM_GETSTATE");
        case 243: return std::string("BM_SETSTATE");
        case 244: return std::string("BM_SETSTYLE");
        case 245: return std::string("BM_CLICK");
        case 246: return std::string("BM_GETIMAGE");
        case 247: return std::string("BM_SETIMAGE");
        case 248: return std::string("BM_SETDONTCLICK");
        case 255: return std::string("WM_INPUT");
        case 256: return std::string("WM_KEYDOWN/WM_KEYFIRST");
        case 257: return std::string("WM_KEYUP");
        case 258: return std::string("WM_CHAR");
        case 259: return std::string("WM_DEADCHAR");
        case 260: return std::string("WM_SYSKEYDOWN");
        case 261: return std::string("WM_SYSKEYUP");
        case 262: return std::string("WM_SYSCHAR");
        case 263: return std::string("WM_SYSDEADCHAR");
        case 264: return std::string("WM_KEYLAST");
        case 265: return std::string("WM_UNICHAR/WM_WNT_CONVERTREQUESTEX");
        case 266: return std::string("WM_CONVERTREQUEST");
        case 267: return std::string("WM_CONVERTRESULT");
        case 268: return std::string("WM_INTERIM");
        case 269: return std::string("WM_IME_STARTCOMPOSITION");
        case 270: return std::string("WM_IME_ENDCOMPOSITION");
        case 271: return std::string("WM_IME_COMPOSITION/WM_IME_KEYLAST");
        case 272: return std::string("WM_INITDIALOG");
        case 273: return std::string("WM_COMMAND");
        case 274: return std::string("WM_SYSCOMMAND");
        case 275: return std::string("WM_TIMER");
        case 276: return std::string("WM_HSCROLL");
        case 277: return std::string("WM_VSCROLL");
        case 278: return std::string("WM_INITMENU");
        case 279: return std::string("WM_INITMENUPOPUP");
        case 280: return std::string("WM_SYSTIMER");
        case 287: return std::string("WM_MENUSELECT");
        case 288: return std::string("WM_MENUCHAR");
        case 289: return std::string("WM_ENTERIDLE");
        case 290: return std::string("WM_MENURBUTTONUP");
        case 291: return std::string("WM_MENUDRAG");
        case 292: return std::string("WM_MENUGETOBJECT");
        case 293: return std::string("WM_UNINITMENUPOPUP");
        case 294: return std::string("WM_MENUCOMMAND");
        case 295: return std::string("WM_CHANGEUISTATE");
        case 296: return std::string("WM_UPDATEUISTATE");
        case 297: return std::string("WM_QUERYUISTATE");
        case 306: return std::string("WM_CTLCOLORMSGBOX");
        case 307: return std::string("WM_CTLCOLOREDIT");
        case 308: return std::string("WM_CTLCOLORLISTBOX");
        case 309: return std::string("WM_CTLCOLORBTN");
        case 310: return std::string("WM_CTLCOLORDLG");
        case 311: return std::string("WM_CTLCOLORSCROLLBAR");
        case 312: return std::string("WM_CTLCOLORSTATIC");
        case 512: return std::string("WM_MOUSEFIRST/WM_MOUSEMOVE");
        case 513: return std::string("WM_LBUTTONDOWN");
        case 514: return std::string("WM_LBUTTONUP");
        case 515: return std::string("WM_LBUTTONDBLCLK");
        case 516: return std::string("WM_RBUTTONDOWN");
        case 517: return std::string("WM_RBUTTONUP");
        case 518: return std::string("WM_RBUTTONDBLCLK");
        case 519: return std::string("WM_MBUTTONDOWN");
        case 520: return std::string("WM_MBUTTONUP");
        case 521: return std::string("WM_MBUTTONDBLCLK/WM_MOUSELAST");
        case 522: return std::string("WM_MOUSEWHEEL");
        case 523: return std::string("WM_XBUTTONDOWN");
        case 524: return std::string("WM_XBUTTONUP");
        case 525: return std::string("WM_XBUTTONDBLCLK");
        case 528: return std::string("WM_PARENTNOTIFY");
        case 529: return std::string("WM_ENTERMENULOOP");
        case 530: return std::string("WM_EXITMENULOOP");
        case 531: return std::string("WM_NEXTMENU");
        case 532: return std::string("WM_SIZING");
        case 533: return std::string("WM_CAPTURECHANGED");
        case 534: return std::string("WM_MOVING");
        case 536: return std::string("WM_POWERBROADCAST");
        case 537: return std::string("WM_DEVICECHANGE");
        case 544: return std::string("WM_MDICREATE");
        case 545: return std::string("WM_MDIDESTROY");
        case 546: return std::string("WM_MDIACTIVATE");
        case 547: return std::string("WM_MDIRESTORE");
        case 548: return std::string("WM_MDINEXT");
        case 549: return std::string("WM_MDIMAXIMIZE");
        case 550: return std::string("WM_MDITILE");
        case 551: return std::string("WM_MDICASCADE");
        case 552: return std::string("WM_MDIICONARRANGE");
        case 553: return std::string("WM_MDIGETACTIVE");
        case 560: return std::string("WM_MDISETMENU");
        case 561: return std::string("WM_ENTERSIZEMOVE");
        case 562: return std::string("WM_EXITSIZEMOVE");
        case 563: return std::string("WM_DROPFILES");
        case 564: return std::string("WM_MDIREFRESHMENU");
        case 640: return std::string("WM_IME_REPORT");
        case 641: return std::string("WM_IME_SETCONTEXT");
        case 642: return std::string("WM_IME_NOTIFY");
        case 643: return std::string("WM_IME_CONTROL");
        case 644: return std::string("WM_IME_COMPOSITIONFULL");
        case 645: return std::string("WM_IME_SELECT");
        case 646: return std::string("WM_IME_CHAR");
        case 648: return std::string("WM_IME_REQUEST");
        case 656: return std::string("WM_IMEKEYDOWN/WM_IME_KEYDOWN");
        case 657: return std::string("WM_IMEKEYUP/WM_IME_KEYUP");
        case 672: return std::string("WM_NCMOUSEHOVER");
        case 673: return std::string("WM_MOUSEHOVER");
        case 674: return std::string("WM_NCMOUSELEAVE");
        case 675: return std::string("WM_MOUSELEAVE");
        case 768: return std::string("WM_CUT");
        case 769: return std::string("WM_COPY");
        case 770: return std::string("WM_PASTE");
        case 771: return std::string("WM_CLEAR");
        case 772: return std::string("WM_UNDO");
        case 773: return std::string("WM_RENDERFORMAT");
        case 774: return std::string("WM_RENDERALLFORMATS");
        case 775: return std::string("WM_DESTROYCLIPBOARD");
        case 776: return std::string("WM_DRAWCLIPBOARD");
        case 777: return std::string("WM_PAINTCLIPBOARD");
        case 778: return std::string("WM_VSCROLLCLIPBOARD");
        case 779: return std::string("WM_SIZECLIPBOARD");
        case 780: return std::string("WM_ASKCBFORMATNAME");
        case 781: return std::string("WM_CHANGECBCHAIN");
        case 782: return std::string("WM_HSCROLLCLIPBOARD");
        case 783: return std::string("WM_QUERYNEWPALETTE");
        case 784: return std::string("WM_PALETTEISCHANGING");
        case 785: return std::string("WM_PALETTECHANGED");
        case 786: return std::string("WM_HOTKEY");
        case 791: return std::string("WM_PRINT");
        case 792: return std::string("WM_PRINTCLIENT");
        case 793: return std::string("WM_APPCOMMAND");
        case 856: return std::string("WM_HANDHELDFIRST");
        case 863: return std::string("WM_HANDHELDLAST");
        case 864: return std::string("WM_AFXFIRST");
        case 895: return std::string("WM_AFXLAST");
        case 896: return std::string("WM_PENWINFIRST");
        case 897: return std::string("WM_RCRESULT");
        case 898: return std::string("WM_HOOKRCRESULT");
        case 899: return std::string("WM_GLOBALRCCHANGE/WM_PENMISCINFO");
        case 900: return std::string("WM_SKB");
        case 901: return std::string("WM_HEDITCTL/WM_PENCTL");
        case 902: return std::string("WM_PENMISC");
        case 903: return std::string("WM_CTLINIT");
        case 904: return std::string("WM_PENEVENT");
        case 911: return std::string("WM_PENWINLAST");
        case 1024: return std::string("DDM_SETFMT/DM_GETDEFID/NIN_SELECT/TBM_GETPOS/WM_PSD_PAGESETUPDLG/WM_USER");
        case 1025: return std::string("CBEM_INSERTITEMA/DDM_DRAW/DM_SETDEFID/HKM_SETHOTKEY/PBM_SETRANGE/RB_INSERTBANDA/SB_SETTEXTA/TB_ENABLEBUTTON/TBM_GETRANGEMIN/TTM_ACTIVATE/WM_CHOOSEFONT_GETLOGFONT/WM_PSD_FULLPAGERECT");
        case 1026: return std::string("CBEM_SETIMAGELIST/DDM_CLOSE/DM_REPOSITION/HKM_GETHOTKEY/PBM_SETPOS/RB_DELETEBAND/SB_GETTEXTA/TB_CHECKBUTTON/TBM_GETRANGEMAX/WM_PSD_MINMARGINRECT");
        case 1027: return std::string("CBEM_GETIMAGELIST/DDM_BEGIN/HKM_SETRULES/PBM_DELTAPOS/RB_GETBARINFO/SB_GETTEXTLENGTHA/TBM_GETTIC/TB_PRESSBUTTON/TTM_SETDELAYTIME/WM_PSD_MARGINRECT");
        case 1028: return std::string("CBEM_GETITEMA/DDM_END/PBM_SETSTEP/RB_SETBARINFO/SB_SETPARTS/TB_HIDEBUTTON/TBM_SETTIC/TTM_ADDTOOLA/WM_PSD_GREEKTEXTRECT");
        case 1029: return std::string("CBEM_SETITEMA/PBM_STEPIT/TB_INDETERMINATE/TBM_SETPOS/TTM_DELTOOLA/WM_PSD_ENVSTAMPRECT");
        case 1030: return std::string("CBEM_GETCOMBOCONTROL/PBM_SETRANGE32/RB_SETBANDINFOA/SB_GETPARTS/TB_MARKBUTTON/TBM_SETRANGE/TTM_NEWTOOLRECTA/WM_PSD_YAFULLPAGERECT");
        case 1031: return std::string("CBEM_GETEDITCONTROL/PBM_GETRANGE/RB_SETPARENT/SB_GETBORDERS/TBM_SETRANGEMIN/TTM_RELAYEVENT");
        case 1032: return std::string("CBEM_SETEXSTYLE/PBM_GETPOS/RB_HITTEST/SB_SETMINHEIGHT/TBM_SETRANGEMAX/TTM_GETTOOLINFOA");
        case 1033: return std::string("CBEM_GETEXSTYLE/CBEM_GETEXTENDEDSTYLE/PBM_SETBARCOLOR/RB_GETRECT/SB_SIMPLE/TB_ISBUTTONENABLED/TBM_CLEARTICS/TTM_SETTOOLINFOA");
        case 1034: return std::string("CBEM_HASEDITCHANGED/RB_INSERTBANDW/SB_GETRECT/TB_ISBUTTONCHECKED/TBM_SETSEL/TTM_HITTESTA/WIZ_QUERYNUMPAGES");
        case 1035: return std::string("CBEM_INSERTITEMW/RB_SETBANDINFOW/SB_SETTEXTW/TB_ISBUTTONPRESSED/TBM_SETSELSTART/TTM_GETTEXTA/WIZ_NEXT");
        case 1036: return std::string("CBEM_SETITEMW/RB_GETBANDCOUNT/SB_GETTEXTLENGTHW/TB_ISBUTTONHIDDEN/TBM_SETSELEND/TTM_UPDATETIPTEXTA/WIZ_PREV");
        case 1037: return std::string("CBEM_GETITEMW/RB_GETROWCOUNT/SB_GETTEXTW/TB_ISBUTTONINDETERMINATE/TTM_GETTOOLCOUNT");
        case 1038: return std::string("CBEM_SETEXTENDEDSTYLE/RB_GETROWHEIGHT/SB_ISSIMPLE/TB_ISBUTTONHIGHLIGHTED/TBM_GETPTICS/TTM_ENUMTOOLSA");
        case 1039: return std::string("SB_SETICON/TBM_GETTICPOS/TTM_GETCURRENTTOOLA");
        case 1040: return std::string("RB_IDTOINDEX/SB_SETTIPTEXTA/TBM_GETNUMTICS/TTM_WINDOWFROMPOINT");
        case 1041: return std::string("RB_GETTOOLTIPS/SB_SETTIPTEXTW/TBM_GETSELSTART/TB_SETSTATE/TTM_TRACKACTIVATE");
        case 1042: return std::string("RB_SETTOOLTIPS/SB_GETTIPTEXTA/TB_GETSTATE/TBM_GETSELEND/TTM_TRACKPOSITION");
        case 1043: return std::string("RB_SETBKCOLOR/SB_GETTIPTEXTW/TB_ADDBITMAP/TBM_CLEARSEL/TTM_SETTIPBKCOLOR");
        case 1044: return std::string("RB_GETBKCOLOR/SB_GETICON/TB_ADDBUTTONSA/TBM_SETTICFREQ/TTM_SETTIPTEXTCOLOR");
        case 1045: return std::string("RB_SETTEXTCOLOR/TB_INSERTBUTTONA/TBM_SETPAGESIZE/TTM_GETDELAYTIME");
        case 1046: return std::string("RB_GETTEXTCOLOR/TB_DELETEBUTTON/TBM_GETPAGESIZE/TTM_GETTIPBKCOLOR");
        case 1047: return std::string("RB_SIZETORECT/TB_GETBUTTON/TBM_SETLINESIZE/TTM_GETTIPTEXTCOLOR");
        case 1048: return std::string("RB_BEGINDRAG/TB_BUTTONCOUNT/TBM_GETLINESIZE/TTM_SETMAXTIPWIDTH");
        case 1049: return std::string("RB_ENDDRAG/TB_COMMANDTOINDEX/TBM_GETTHUMBRECT/TTM_GETMAXTIPWIDTH");
        case 1050: return std::string("RB_DRAGMOVE/TBM_GETCHANNELRECT/TB_SAVERESTOREA/TTM_SETMARGIN");
        case 1051: return std::string("RB_GETBARHEIGHT/TB_CUSTOMIZE/TBM_SETTHUMBLENGTH/TTM_GETMARGIN");
        case 1052: return std::string("RB_GETBANDINFOW/TB_ADDSTRINGA/TBM_GETTHUMBLENGTH/TTM_POP");
        case 1053: return std::string("RB_GETBANDINFOA/TB_GETITEMRECT/TBM_SETTOOLTIPS/TTM_UPDATE");
        case 1054: return std::string("RB_MINIMIZEBAND/TB_BUTTONSTRUCTSIZE/TBM_GETTOOLTIPS/TTM_GETBUBBLESIZE");
        case 1055: return std::string("RB_MAXIMIZEBAND/TBM_SETTIPSIDE/TB_SETBUTTONSIZE/TTM_ADJUSTRECT");
        case 1056: return std::string("TBM_SETBUDDY/TB_SETBITMAPSIZE/TTM_SETTITLEA");
        case 1057: return std::string("MSG_FTS_JUMP_VA/TB_AUTOSIZE/TBM_GETBUDDY/TTM_SETTITLEW");
        case 1058: return std::string("RB_GETBANDBORDERS");
        case 1059: return std::string("MSG_FTS_JUMP_QWORD/RB_SHOWBAND/TB_GETTOOLTIPS");
        case 1060: return std::string("MSG_REINDEX_REQUEST/TB_SETTOOLTIPS");
        case 1061: return std::string("MSG_FTS_WHERE_IS_IT/RB_SETPALETTE/TB_SETPARENT");
        case 1062: return std::string("RB_GETPALETTE");
        case 1063: return std::string("RB_MOVEBAND/TB_SETROWS");
        case 1064: return std::string("TB_GETROWS");
        case 1065: return std::string("TB_GETBITMAPFLAGS");
        case 1066: return std::string("TB_SETCMDID");
        case 1067: return std::string("RB_PUSHCHEVRON/TB_CHANGEBITMAP");
        case 1068: return std::string("TB_GETBITMAP");
        case 1069: return std::string("MSG_GET_DEFFONT/TB_GETBUTTONTEXTA");
        case 1070: return std::string("TB_REPLACEBITMAP");
        case 1071: return std::string("TB_SETINDENT");
        case 1072: return std::string("TB_SETIMAGELIST");
        case 1073: return std::string("TB_GETIMAGELIST");
        case 1074: return std::string("TB_LOADIMAGES/EM_CANPASTE/TTM_ADDTOOLW");
        case 1075: return std::string("EM_DISPLAYBAND/TB_GETRECT/TTM_DELTOOLW");
        case 1076: return std::string("EM_EXGETSEL/TB_SETHOTIMAGELIST/TTM_NEWTOOLRECTW");
        case 1077: return std::string("EM_EXLIMITTEXT/TB_GETHOTIMAGELIST/TTM_GETTOOLINFOW");
        case 1078: return std::string("EM_EXLINEFROMCHAR/TB_SETDISABLEDIMAGELIST/TTM_SETTOOLINFOW");
        case 1079: return std::string("EM_EXSETSEL/TB_GETDISABLEDIMAGELIST/TTM_HITTESTW");
        case 1080: return std::string("EM_FINDTEXT/TB_SETSTYLE/TTM_GETTEXTW");
        case 1081: return std::string("EM_FORMATRANGE/TB_GETSTYLE/TTM_UPDATETIPTEXTW");
        case 1082: return std::string("EM_GETCHARFORMAT/TB_GETBUTTONSIZE/TTM_ENUMTOOLSW");
        case 1083: return std::string("EM_GETEVENTMASK/TB_SETBUTTONWIDTH/TTM_GETCURRENTTOOLW");
        case 1084: return std::string("EM_GETOLEINTERFACE/TB_SETMAXTEXTROWS");
        case 1085: return std::string("EM_GETPARAFORMAT/TB_GETTEXTROWS");
        case 1086: return std::string("EM_GETSELTEXT/TB_GETOBJECT");
        case 1087: return std::string("EM_HIDESELECTION/TB_GETBUTTONINFOW");
        case 1088: return std::string("EM_PASTESPECIAL/TB_SETBUTTONINFOW");
        case 1089: return std::string("EM_REQUESTRESIZE/TB_GETBUTTONINFOA");
        case 1090: return std::string("EM_SELECTIONTYPE/TB_SETBUTTONINFOA");
        case 1091: return std::string("EM_SETBKGNDCOLOR/TB_INSERTBUTTONW");
        case 1092: return std::string("EM_SETCHARFORMAT/TB_ADDBUTTONSW");
        case 1093: return std::string("EM_SETEVENTMASK/TB_HITTEST");
        case 1094: return std::string("EM_SETOLECALLBACK/TB_SETDRAWTEXTFLAGS");
        case 1095: return std::string("EM_SETPARAFORMAT/TB_GETHOTITEM");
        case 1096: return std::string("EM_SETTARGETDEVICE/TB_SETHOTITEM");
        case 1097: return std::string("EM_STREAMIN/TB_SETANCHORHIGHLIGHT");
        case 1098: return std::string("EM_STREAMOUT/TB_GETANCHORHIGHLIGHT");
        case 1099: return std::string("EM_GETTEXTRANGE/TB_GETBUTTONTEXTW");
        case 1100: return std::string("EM_FINDWORDBREAK/TB_SAVERESTOREW");
        case 1101: return std::string("EM_SETOPTIONS/TB_ADDSTRINGW");
        case 1102: return std::string("EM_GETOPTIONS/TB_MAPACCELERATORA");
        case 1103: return std::string("EM_FINDTEXTEX/TB_GETINSERTMARK");
        case 1104: return std::string("EM_GETWORDBREAKPROCEX/TB_SETINSERTMARK");
        case 1105: return std::string("EM_SETWORDBREAKPROCEX/TB_INSERTMARKHITTEST");
        case 1106: return std::string("EM_SETUNDOLIMIT/TB_MOVEBUTTON");
        case 1107: return std::string("TB_GETMAXSIZE");
        case 1108: return std::string("EM_REDO/TB_SETEXTENDEDSTYLE");
        case 1109: return std::string("EM_CANREDO/TB_GETEXTENDEDSTYLE");
        case 1110: return std::string("EM_GETUNDONAME/TB_GETPADDING");
        case 1111: return std::string("EM_GETREDONAME/TB_SETPADDING");
        case 1112: return std::string("EM_STOPGROUPTYPING/TB_SETINSERTMARKCOLOR");
        case 1113: return std::string("EM_SETTEXTMODE/TB_GETINSERTMARKCOLOR");
        case 1114: return std::string("EM_GETTEXTMODE/TB_MAPACCELERATORW");
        case 1115: return std::string("EM_AUTOURLDETECT/TB_GETSTRINGW");
        case 1116: return std::string("EM_GETAUTOURLDETECT/TB_GETSTRINGA");
        case 1117: return std::string("EM_SETPALETTE");
        case 1118: return std::string("EM_GETTEXTEX");
        case 1119: return std::string("EM_GETTEXTLENGTHEX");
        case 1120: return std::string("EM_SHOWSCROLLBAR");
        case 1121: return std::string("EM_SETTEXTEX");
        case 1123: return std::string("TAPI_REPLY");
        case 1124: return std::string("ACM_OPENA/BFFM_SETSTATUSTEXTA/CDM_FIRST/CDM_GETSPEC/EM_SETPUNCTUATION/IPM_CLEARADDRESS/WM_CAP_UNICODE_START");
        case 1125: return std::string("ACM_PLAY/BFFM_ENABLEOK/CDM_GETFILEPATH/EM_GETPUNCTUATION/IPM_SETADDRESS/PSM_SETCURSEL/UDM_SETRANGE/WM_CHOOSEFONT_SETLOGFONT");
        case 1126: return std::string("ACM_STOP/BFFM_SETSELECTIONA/CDM_GETFOLDERPATH/EM_SETWORDWRAPMODE/IPM_GETADDRESS/PSM_REMOVEPAGE/UDM_GETRANGE/WM_CAP_SET_CALLBACK_ERRORW/WM_CHOOSEFONT_SETFLAGS");
        case 1127: return std::string("ACM_OPENW/BFFM_SETSELECTIONW/CDM_GETFOLDERIDLIST/EM_GETWORDWRAPMODE/IPM_SETRANGE/PSM_ADDPAGE/UDM_SETPOS/WM_CAP_SET_CALLBACK_STATUSW");
        case 1128: return std::string("BFFM_SETSTATUSTEXTW/CDM_SETCONTROLTEXT/EM_SETIMECOLOR/IPM_SETFOCUS/PSM_CHANGED/UDM_GETPOS");
        case 1129: return std::string("CDM_HIDECONTROL/EM_GETIMECOLOR/IPM_ISBLANK/PSM_RESTARTWINDOWS/UDM_SETBUDDY");
        case 1130: return std::string("CDM_SETDEFEXT/EM_SETIMEOPTIONS/PSM_REBOOTSYSTEM/UDM_GETBUDDY");
        case 1131: return std::string("EM_GETIMEOPTIONS/PSM_CANCELTOCLOSE/UDM_SETACCEL");
        case 1132: return std::string("EM_CONVPOSITION/EM_CONVPOSITION/PSM_QUERYSIBLINGS/UDM_GETACCEL");
        case 1133: return std::string("MCIWNDM_GETZOOM/PSM_UNCHANGED/UDM_SETBASE");
        case 1134: return std::string("PSM_APPLY/UDM_GETBASE");
        case 1135: return std::string("PSM_SETTITLEA/UDM_SETRANGE32");
        case 1136: return std::string("PSM_SETWIZBUTTONS/UDM_GETRANGE32/WM_CAP_DRIVER_GET_NAMEW");
        case 1137: return std::string("PSM_PRESSBUTTON/UDM_SETPOS32/WM_CAP_DRIVER_GET_VERSIONW");
        case 1138: return std::string("PSM_SETCURSELID/UDM_GETPOS32");
        case 1139: return std::string("PSM_SETFINISHTEXTA");
        case 1140: return std::string("PSM_GETTABCONTROL");
        case 1141: return std::string("PSM_ISDIALOGMESSAGE");
        case 1142: return std::string("MCIWNDM_REALIZE/PSM_GETCURRENTPAGEHWND");
        case 1143: return std::string("MCIWNDM_SETTIMEFORMATA/PSM_INSERTPAGE");
        case 1144: return std::string("EM_SETLANGOPTIONS/MCIWNDM_GETTIMEFORMATA/PSM_SETTITLEW/WM_CAP_FILE_SET_CAPTURE_FILEW");
        case 1145: return std::string("EM_GETLANGOPTIONS/MCIWNDM_VALIDATEMEDIA/PSM_SETFINISHTEXTW/WM_CAP_FILE_GET_CAPTURE_FILEW");
        case 1146: return std::string("EM_GETIMECOMPMODE");
        case 1147: return std::string("EM_FINDTEXTW/MCIWNDM_PLAYTO/WM_CAP_FILE_SAVEASW");
        case 1148: return std::string("EM_FINDTEXTEXW/MCIWNDM_GETFILENAMEA");
        case 1149: return std::string("EM_RECONVERSION/MCIWNDM_GETDEVICEA/PSM_SETHEADERTITLEA/WM_CAP_FILE_SAVEDIBW");
        case 1150: return std::string("EM_SETIMEMODEBIAS/MCIWNDM_GETPALETTE/PSM_SETHEADERTITLEW");
        case 1151: return std::string("EM_GETIMEMODEBIAS/MCIWNDM_SETPALETTE/PSM_SETHEADERSUBTITLEA");
        case 1152: return std::string("MCIWNDM_GETERRORA/PSM_SETHEADERSUBTITLEW");
        case 1153: return std::string("PSM_HWNDTOINDEX");
        case 1154: return std::string("PSM_INDEXTOHWND");
        case 1155: return std::string("MCIWNDM_SETINACTIVETIMER/PSM_PAGETOINDEX");
        case 1156: return std::string("PSM_INDEXTOPAGE");
        case 1157: return std::string("DL_BEGINDRAG/MCIWNDM_GETINACTIVETIMER/PSM_IDTOINDEX");
        case 1158: return std::string("DL_DRAGGING/PSM_INDEXTOID");
        case 1159: return std::string("DL_DROPPED/PSM_GETRESULT");
        case 1160: return std::string("DL_CANCELDRAG/PSM_RECALCPAGESIZES");
        case 1164: return std::string("MCIWNDM_GET_SOURCE");
        case 1165: return std::string("MCIWNDM_PUT_SOURCE");
        case 1166: return std::string("MCIWNDM_GET_DEST");
        case 1167: return std::string("MCIWNDM_PUT_DEST");
        case 1168: return std::string("MCIWNDM_CAN_PLAY");
        case 1169: return std::string("MCIWNDM_CAN_WINDOW");
        case 1170: return std::string("MCIWNDM_CAN_RECORD");
        case 1171: return std::string("MCIWNDM_CAN_SAVE");
        case 1172: return std::string("MCIWNDM_CAN_EJECT");
        case 1173: return std::string("MCIWNDM_CAN_CONFIG");
        case 1174: return std::string("IE_GETINK/IE_MSGFIRST/MCIWNDM_PALETTEKICK");
        case 1175: return std::string("IE_SETINK");
        case 1176: return std::string("IE_GETPENTIP");
        case 1177: return std::string("IE_SETPENTIP");
        case 1178: return std::string("IE_GETERASERTIP");
        case 1179: return std::string("IE_SETERASERTIP");
        case 1180: return std::string("IE_GETBKGND");
        case 1181: return std::string("IE_SETBKGND");
        case 1182: return std::string("IE_GETGRIDORIGIN");
        case 1183: return std::string("IE_SETGRIDORIGIN");
        case 1184: return std::string("IE_GETGRIDPEN");
        case 1185: return std::string("IE_SETGRIDPEN");
        case 1186: return std::string("IE_GETGRIDSIZE");
        case 1187: return std::string("IE_SETGRIDSIZE");
        case 1188: return std::string("IE_GETMODE");
        case 1189: return std::string("IE_SETMODE");
        case 1190: return std::string("IE_GETINKRECT/WM_CAP_SET_MCI_DEVICEW");
        case 1191: return std::string("WM_CAP_GET_MCI_DEVICEW");
        case 1204: return std::string("WM_CAP_PAL_OPENW");
        case 1205: return std::string("WM_CAP_PAL_SAVEW");
        case 1208: return std::string("IE_GETAPPDATA");
        case 1209: return std::string("IE_SETAPPDATA");
        case 1210: return std::string("IE_GETDRAWOPTS");
        case 1211: return std::string("IE_SETDRAWOPTS");
        case 1212: return std::string("IE_GETFORMAT");
        case 1213: return std::string("IE_SETFORMAT");
        case 1214: return std::string("IE_GETINKINPUT");
        case 1215: return std::string("IE_SETINKINPUT");
        case 1216: return std::string("IE_GETNOTIFY");
        case 1217: return std::string("IE_SETNOTIFY");
        case 1218: return std::string("IE_GETRECOG");
        case 1219: return std::string("IE_SETRECOG");
        case 1220: return std::string("IE_GETSECURITY");
        case 1221: return std::string("IE_SETSECURITY");
        case 1222: return std::string("IE_GETSEL");
        case 1223: return std::string("IE_SETSEL");
        case 1224: return std::string("CDM_LAST/EM_SETBIDIOPTIONS/IE_DOCOMMAND/MCIWNDM_NOTIFYMODE");
        case 1225: return std::string("EM_GETBIDIOPTIONS/IE_GETCOMMAND");
        case 1226: return std::string("EM_SETTYPOGRAPHYOPTIONS/IE_GETCOUNT");
        case 1227: return std::string("EM_GETTYPOGRAPHYOPTIONS/IE_GETGESTURE/MCIWNDM_NOTIFYMEDIA");
        case 1228: return std::string("EM_SETEDITSTYLE/IE_GETMENU");
        case 1229: return std::string("EM_GETEDITSTYLE/IE_GETPAINTDC/MCIWNDM_NOTIFYERROR");
        case 1230: return std::string("IE_GETPDEVENT");
        case 1231: return std::string("IE_GETSELCOUNT");
        case 1232: return std::string("IE_GETSELITEMS");
        case 1233: return std::string("IE_GETSTYLE");
        case 1243: return std::string("MCIWNDM_SETTIMEFORMATW");
        case 1244: return std::string("EM_OUTLINE/EM_OUTLINE/MCIWNDM_GETTIMEFORMATW");
        case 1245: return std::string("EM_GETSCROLLPOS/EM_GETSCROLLPOS");
        case 1246: return std::string("EM_SETSCROLLPOS/EM_SETSCROLLPOS");
        case 1247: return std::string("EM_SETFONTSIZE/EM_SETFONTSIZE");
        case 1248: return std::string("EM_GETZOOM/MCIWNDM_GETFILENAMEW");
        case 1249: return std::string("EM_SETZOOM/MCIWNDM_GETDEVICEW");
        case 1250: return std::string("EM_GETVIEWKIND");
        case 1251: return std::string("EM_SETVIEWKIND");
        case 1252: return std::string("EM_GETPAGE/MCIWNDM_GETERRORW");
        case 1253: return std::string("EM_SETPAGE");
        case 1254: return std::string("EM_GETHYPHENATEINFO");
        case 1255: return std::string("EM_SETHYPHENATEINFO");
        case 1259: return std::string("EM_GETPAGEROTATE");
        case 1260: return std::string("EM_SETPAGEROTATE");
        case 1261: return std::string("EM_GETCTFMODEBIAS");
        case 1262: return std::string("EM_SETCTFMODEBIAS");
        case 1264: return std::string("EM_GETCTFOPENSTATUS");
        case 1265: return std::string("EM_SETCTFOPENSTATUS");
        case 1266: return std::string("EM_GETIMECOMPTEXT");
        case 1267: return std::string("EM_ISIME");
        case 1268: return std::string("EM_GETIMEPROPERTY");
        case 1293: return std::string("EM_GETQUERYRTFOBJ");
        case 1294: return std::string("EM_SETQUERYRTFOBJ");
        case 1536: return std::string("FM_GETFOCUS");
        case 1537: return std::string("FM_GETDRIVEINFOA");
        case 1538: return std::string("FM_GETSELCOUNT");
        case 1539: return std::string("FM_GETSELCOUNTLFN");
        case 1540: return std::string("FM_GETFILESELA");
        case 1541: return std::string("FM_GETFILESELLFNA");
        case 1542: return std::string("FM_REFRESH_WINDOWS");
        case 1543: return std::string("FM_RELOAD_EXTENSIONS");
        case 1553: return std::string("FM_GETDRIVEINFOW");
        case 1556: return std::string("FM_GETFILESELW");
        case 1557: return std::string("FM_GETFILESELLFNW");
        case 1625: return std::string("WLX_WM_SAS");
        case 2024: return std::string("SM_GETSELCOUNT/UM_GETSELCOUNT/WM_CPL_LAUNCH");
        case 2025: return std::string("SM_GETSERVERSELA/UM_GETUSERSELA/WM_CPL_LAUNCHED");
        case 2026: return std::string("SM_GETSERVERSELW/UM_GETUSERSELW");
        case 2027: return std::string("SM_GETCURFOCUSA/UM_GETGROUPSELA");
        case 2028: return std::string("SM_GETCURFOCUSW/UM_GETGROUPSELW");
        case 2029: return std::string("SM_GETOPTIONS/UM_GETCURFOCUSA");
        case 2030: return std::string("UM_GETCURFOCUSW");
        case 2031: return std::string("UM_GETOPTIONS");
        case 2032: return std::string("UM_GETOPTIONS2");
        case 4096: return std::string("LVM_FIRST/LVM_GETBKCOLOR");
        case 4097: return std::string("LVM_SETBKCOLOR");
        case 4098: return std::string("LVM_GETIMAGELIST");
        case 4099: return std::string("LVM_SETIMAGELIST");
        case 4100: return std::string("LVM_GETITEMCOUNT");
        case 4101: return std::string("LVM_GETITEMA");
        case 4102: return std::string("LVM_SETITEMA");
        case 4103: return std::string("LVM_INSERTITEMA");
        case 4104: return std::string("LVM_DELETEITEM");
        case 4105: return std::string("LVM_DELETEALLITEMS");
        case 4106: return std::string("LVM_GETCALLBACKMASK");
        case 4107: return std::string("LVM_SETCALLBACKMASK");
        case 4108: return std::string("LVM_GETNEXTITEM");
        case 4109: return std::string("LVM_FINDITEMA");
        case 4110: return std::string("LVM_GETITEMRECT");
        case 4111: return std::string("LVM_SETITEMPOSITION");
        case 4112: return std::string("LVM_GETITEMPOSITION");
        case 4113: return std::string("LVM_GETSTRINGWIDTHA");
        case 4114: return std::string("LVM_HITTEST");
        case 4115: return std::string("LVM_ENSUREVISIBLE");
        case 4116: return std::string("LVM_SCROLL");
        case 4117: return std::string("LVM_REDRAWITEMS");
        case 4118: return std::string("LVM_ARRANGE");
        case 4119: return std::string("LVM_EDITLABELA");
        case 4120: return std::string("LVM_GETEDITCONTROL");
        case 4121: return std::string("LVM_GETCOLUMNA");
        case 4122: return std::string("LVM_SETCOLUMNA");
        case 4123: return std::string("LVM_INSERTCOLUMNA");
        case 4124: return std::string("LVM_DELETECOLUMN");
        case 4125: return std::string("LVM_GETCOLUMNWIDTH");
        case 4126: return std::string("LVM_SETCOLUMNWIDTH");
        case 4127: return std::string("LVM_GETHEADER");
        case 4129: return std::string("LVM_CREATEDRAGIMAGE");
        case 4130: return std::string("LVM_GETVIEWRECT");
        case 4131: return std::string("LVM_GETTEXTCOLOR");
        case 4132: return std::string("LVM_SETTEXTCOLOR");
        case 4133: return std::string("LVM_GETTEXTBKCOLOR");
        case 4134: return std::string("LVM_SETTEXTBKCOLOR");
        case 4135: return std::string("LVM_GETTOPINDEX");
        case 4136: return std::string("LVM_GETCOUNTPERPAGE");
        case 4137: return std::string("LVM_GETORIGIN");
        case 4138: return std::string("LVM_UPDATE");
        case 4139: return std::string("LVM_SETITEMSTATE");
        case 4140: return std::string("LVM_GETITEMSTATE");
        case 4141: return std::string("LVM_GETITEMTEXTA");
        case 4142: return std::string("LVM_SETITEMTEXTA");
        case 4143: return std::string("LVM_SETITEMCOUNT");
        case 4144: return std::string("LVM_SORTITEMS");
        case 4145: return std::string("LVM_SETITEMPOSITION32");
        case 4146: return std::string("LVM_GETSELECTEDCOUNT");
        case 4147: return std::string("LVM_GETITEMSPACING");
        case 4148: return std::string("LVM_GETISEARCHSTRINGA");
        case 4149: return std::string("LVM_SETICONSPACING");
        case 4150: return std::string("LVM_SETEXTENDEDLISTVIEWSTYLE");
        case 4151: return std::string("LVM_GETEXTENDEDLISTVIEWSTYLE");
        case 4152: return std::string("LVM_GETSUBITEMRECT");
        case 4153: return std::string("LVM_SUBITEMHITTEST");
        case 4154: return std::string("LVM_SETCOLUMNORDERARRAY");
        case 4155: return std::string("LVM_GETCOLUMNORDERARRAY");
        case 4156: return std::string("LVM_SETHOTITEM");
        case 4157: return std::string("LVM_GETHOTITEM");
        case 4158: return std::string("LVM_SETHOTCURSOR");
        case 4159: return std::string("LVM_GETHOTCURSOR");
        case 4160: return std::string("LVM_APPROXIMATEVIEWRECT");
        case 4161: return std::string("LVM_SETWORKAREAS");
        case 4162: return std::string("LVM_GETSELECTIONMARK");
        case 4163: return std::string("LVM_SETSELECTIONMARK");
        case 4164: return std::string("LVM_SETBKIMAGEA");
        case 4165: return std::string("LVM_GETBKIMAGEA");
        case 4166: return std::string("LVM_GETWORKAREAS");
        case 4167: return std::string("LVM_SETHOVERTIME");
        case 4168: return std::string("LVM_GETHOVERTIME");
        case 4169: return std::string("LVM_GETNUMBEROFWORKAREAS");
        case 4170: return std::string("LVM_SETTOOLTIPS");
        case 4171: return std::string("LVM_GETITEMW");
        case 4172: return std::string("LVM_SETITEMW");
        case 4173: return std::string("LVM_INSERTITEMW");
        case 4174: return std::string("LVM_GETTOOLTIPS");
        case 4179: return std::string("LVM_FINDITEMW");
        case 4183: return std::string("LVM_GETSTRINGWIDTHW");
        case 4191: return std::string("LVM_GETCOLUMNW");
        case 4192: return std::string("LVM_SETCOLUMNW");
        case 4193: return std::string("LVM_INSERTCOLUMNW");
        case 4211: return std::string("LVM_GETITEMTEXTW");
        case 4212: return std::string("LVM_SETITEMTEXTW");
        case 4213: return std::string("LVM_GETISEARCHSTRINGW");
        case 4214: return std::string("LVM_EDITLABELW");
        case 4235: return std::string("LVM_GETBKIMAGEW");
        case 4236: return std::string("LVM_SETSELECTEDCOLUMN");
        case 4237: return std::string("LVM_SETTILEWIDTH");
        case 4238: return std::string("LVM_SETVIEW");
        case 4239: return std::string("LVM_GETVIEW");
        case 4241: return std::string("LVM_INSERTGROUP");
        case 4243: return std::string("LVM_SETGROUPINFO");
        case 4245: return std::string("LVM_GETGROUPINFO");
        case 4246: return std::string("LVM_REMOVEGROUP");
        case 4247: return std::string("LVM_MOVEGROUP");
        case 4250: return std::string("LVM_MOVEITEMTOGROUP");
        case 4251: return std::string("LVM_SETGROUPMETRICS");
        case 4252: return std::string("LVM_GETGROUPMETRICS");
        case 4253: return std::string("LVM_ENABLEGROUPVIEW");
        case 4254: return std::string("LVM_SORTGROUPS");
        case 4255: return std::string("LVM_INSERTGROUPSORTED");
        case 4256: return std::string("LVM_REMOVEALLGROUPS");
        case 4257: return std::string("LVM_HASGROUP");
        case 4258: return std::string("LVM_SETTILEVIEWINFO");
        case 4259: return std::string("LVM_GETTILEVIEWINFO");
        case 4260: return std::string("LVM_SETTILEINFO");
        case 4261: return std::string("LVM_GETTILEINFO");
        case 4262: return std::string("LVM_SETINSERTMARK");
        case 4263: return std::string("LVM_GETINSERTMARK");
        case 4264: return std::string("LVM_INSERTMARKHITTEST");
        case 4265: return std::string("LVM_GETINSERTMARKRECT");
        case 4266: return std::string("LVM_SETINSERTMARKCOLOR");
        case 4267: return std::string("LVM_GETINSERTMARKCOLOR");
        case 4269: return std::string("LVM_SETINFOTIP");
        case 4270: return std::string("LVM_GETSELECTEDCOLUMN");
        case 4271: return std::string("LVM_ISGROUPVIEWENABLED");
        case 4272: return std::string("LVM_GETOUTLINECOLOR");
        case 4273: return std::string("LVM_SETOUTLINECOLOR");
        case 4275: return std::string("LVM_CANCELEDITLABEL");
        case 4276: return std::string("LVM_MAPINDEXTOID");
        case 4277: return std::string("LVM_MAPIDTOINDEX");
        case 4278: return std::string("LVM_ISITEMVISIBLE");
        case 8192: return std::string("OCM__BASE");
        case 8197: return std::string("LVM_SETUNICODEFORMAT");
        case 8198: return std::string("LVM_GETUNICODEFORMAT");
        case 8217: return std::string("OCM_CTLCOLOR");
        case 8235: return std::string("OCM_DRAWITEM");
        case 8236: return std::string("OCM_MEASUREITEM");
        case 8237: return std::string("OCM_DELETEITEM");
        case 8238: return std::string("OCM_VKEYTOITEM");
        case 8239: return std::string("OCM_CHARTOITEM");
        case 8249: return std::string("OCM_COMPAREITEM");
        case 8270: return std::string("OCM_NOTIFY");
        case 8465: return std::string("OCM_COMMAND");
        case 8468: return std::string("OCM_HSCROLL");
        case 8469: return std::string("OCM_VSCROLL");
        case 8498: return std::string("OCM_CTLCOLORMSGBOX");
        case 8499: return std::string("OCM_CTLCOLOREDIT");
        case 8500: return std::string("OCM_CTLCOLORLISTBOX");
        case 8501: return std::string("OCM_CTLCOLORBTN");
        case 8502: return std::string("OCM_CTLCOLORDLG");
        case 8503: return std::string("OCM_CTLCOLORSCROLLBAR");
        case 8504: return std::string("OCM_CTLCOLORSTATIC");
        case 8720: return std::string("OCM_PARENTNOTIFY");
        case 32768: return std::string("WM_APP");
        case 52429: return std::string("WM_RASDIALEVENT");
        default: return std::string("UNKNOWN_MESSAGE");
    }
}

/*
void writeThatAwefullSwitch()
{
std::ofstream out;
out.open("Utility/WinMessage.cpp");

Tools::CSVTool csv = Tools::readFromFile("wmsg.csv");

out << "switch(msg)" << std::endl;
out << "{" << std::endl;
for(size_t i = 0; i < csv.rowCount(); ++i)
{
    size_t nr = atoi(csv.getValue(1, i).c_str());
    out << "\tcase " << csv.getValue(1, i) << ": return std::string(\"" << Tools::removeAllOf(csv.getValue(2, i), ' ');
    while(++i < csv.rowCount())
    {
        if(nr == atoi(csv.getValue(1, i).c_str()))
            out << "/" << Tools::removeAllOf(csv.getValue(2, i), ' ');
        else
        {
            --i;
            break;
        };
    }
    out << "\");" << std::endl;
}
out << "\tdefault: return std::string(\"UNKNOWN_MESSAGE\");" << std::endl;

out.close();

}
*/
